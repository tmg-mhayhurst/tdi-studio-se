<%@ jet
imports="
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.INode
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.process.IConnection
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.metadata.MappingTypeRetriever
    org.talend.core.model.metadata.MetadataTalendType
    org.talend.core.model.process.IConnectionCategory
    java.util.List
    java.util.ArrayList
    java.util.Map
    java.util.HashMap
    org.talend.core.model.process.IProcess
    org.talend.core.model.utils.NodeUtil
    "
skeleton="../templates/db_output_bulk.skeleton"
%>
    <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/DBLogUtil.javajet"%>
    <%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();

    dbLog = new DBLogUtil(node);

    String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");
    String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
    String tableName = ElementParameterParser.getValue(node,"__TABLE__");
    String table = ElementParameterParser.getValue(node,"__TABLE__");
    String tableSchema = ElementParameterParser.getValue(node,"__TABLESCHEMA__");
    String dbmsId = ElementParameterParser.getValue(node,"__MAPPING__");
    String tableAction = ElementParameterParser.getValue(node,"__TABLE_ACTION__");
    boolean convertToUppercase = ("true").equals(ElementParameterParser.getValue(node, "__CONVERT_COLUMN_TABLE_TO_UPPERCASE__"));
    List<Map<String, String>> addCols =
            (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__ADD_COLS__");

    boolean useFieldOptions = ("true").equals(ElementParameterParser.getValue(node, "__USE_FIELD_OPTIONS__"));

    List<Map<String, String>> fieldOptions = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FIELD_OPTIONS__");

    String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");
    String useBatchSize = ElementParameterParser.getValue(node, "__USE_BATCH_SIZE__");
    String useBatchAndUseConn = ElementParameterParser.getValue(node,"__USE_BATCH_AND_USE_CONN__");
    String batchSize =ElementParameterParser.getValue(node, "__BATCH_SIZE__");
    String dbVersion = ElementParameterParser.getValue(node, "__DB_VERSION__");
    boolean useExistingConnection = "true".equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
        String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
    if(useExistingConnection) {
        List<? extends INode> nodes = node.getProcess().getGeneratingNodes();
        for(INode targetNode : nodes){
            if (targetNode.getUniqueName().equals(connection)) {
              dbVersion = ElementParameterParser.getValue(targetNode, "__DB_VERSION__");
            }
        }
    }

    boolean isEnableDebug = ("true").equals(ElementParameterParser.getValue(node,"__ENABLE_DEBUG_MODE__"));

    boolean useSpatialOptions = ("true").equals(ElementParameterParser.getValue(node,"__USE_SPATIAL_OPTIONS__"));
    boolean createSpatialIndex = ("true").equals(ElementParameterParser.getValue(node,"__SPATIAL_INDEX__"));
    boolean createGeometryColumns = ("true").equals(ElementParameterParser.getValue(node,"__GEOMETRY_COLUMNS__"));

    //feature:2880
    ((OracleManager)getManager(dbmsId, cid, node)).setDbVersion(dbVersion);
    boolean whereSupportNull = ElementParameterParser.getValue(node, "__SUPPORT_NULL_WHERE__").equals("true");

    String incomingConnName = null;
    List<IMetadataColumn> columnList = getColumnList(node);

    List< ? extends IConnection> conns = node.getIncomingConnections();
    if(conns!=null && conns.size() > 0) {
        IConnection conn = conns.get(0);
        incomingConnName = conn.getName();
    }

    String rejectConnName = null;
    List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
    if(rejectConns != null && rejectConns.size() > 0) {
        IConnection rejectConn = rejectConns.get(0);
        rejectConnName = rejectConn.getName();
    }

    INode connectionNode = NodeUtil.getNodeByUniqueName(node.getProcess(), connection);
	
    boolean isUseBatchByDBVersion = (!useExistingConnection && !"ORACLE_8".equalsIgnoreCase(dbVersion)) 
		|| (useExistingConnection && (connectionNode==null || (connectionNode!=null && !"ORACLE_8".equalsIgnoreCase(connectionNode.getUniqueName()))));

    boolean useBatch = true;
    if(useExistingConnection){
        useBatch = rejectConnName == null && isUseBatchByDBVersion && (("INSERT").equals(dataAction) || ("UPDATE").equals(dataAction) || ("DELETE").equals(dataAction)) && ("true").equals(useBatchAndUseConn);
    }else{
        useBatch = rejectConnName == null && isUseBatchByDBVersion && (("INSERT").equals(dataAction) || ("UPDATE").equals(dataAction) || ("DELETE").equals(dataAction)) && ("true").equals(useBatchSize);
    }

    List<IMetadataColumn> rejectColumnList = null;
    IMetadataTable metadataTable = node.getMetadataFromConnector("REJECT");
    if(metadataTable != null) {
        rejectColumnList = metadataTable.getListColumns();
    }

    List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();
    for(IConnection conn : outgoingConns) {
        if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
        %>
            <%=conn.getName() %> = null;
        <%
        }
    }

    Manager manager = null;
    boolean isDynamic = false;
    List<IMetadataTable> metadatas = node.getMetadataList();
    if ((metadatas!=null)&&(metadatas.size()>0)) {
        IMetadataTable metadata = metadatas.get(0);
        isDynamic = metadata.isDynamicSchema();
    }

    List<Column> stmtStructure =  getManager(dbmsId, cid).createColumnList(columnList, useFieldOptions, fieldOptions, addCols);
    isDynamic = isDynamic && !getManager(dbmsId, cid).isDynamicColumnReplaced();
    IMetadataColumn talendDynCol = null;

    if(isDynamic) {
    %>
        if(nb_line_<%=cid%>==0) {
            <%
            ///// hint options/////
            boolean useHintOptions = ("true").equals(ElementParameterParser.getValue(node,"__USE_HINT_OPTIONS__"));
            Map<String, String> hintsValues = null;
            if (useHintOptions) {
                List<Map<String, String>> hintOptions = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__HINT_OPTIONS__");
                hintsValues = new HashMap<String, String>();
                String hintValue = null;
                boolean firstInsert = true;
                boolean firstUpdate = true;
                boolean firstDelete = true;
                boolean firstTableName = true;
                for(java.util.Map<String, String> option : hintOptions) {
                    //get
                    if(option.get("HINT").matches("\"/\\*NORMALIZED_HINT\\*/\"")) {
                        String id = cid.replace(node.getComponent().getName() + "_", "");
                        hintValue = "\"/*\"+" + table + "+\".\" + "  + "\"" + option.get("SQL_STMT")+ ".\"" + "+" +  id   +  "+\"*/\" " ;
                    }else if (option.get("HINT").matches("\"/\\*+.*\\*/\"")) {
                        hintValue = option.get("HINT");
                    }
                    //set
                    if ("INSERT".equalsIgnoreCase(option.get("SQL_STMT"))){
                        if(firstInsert){
                            hintsValues.put("INSERT", hintValue) ;
                            firstInsert = false;
                        }else {
                            hintsValues.put("INSERT", hintsValues.get("INSERT") + "+" + hintValue) ;
                        }
                    }else if ("UPDATE".equalsIgnoreCase(option.get("SQL_STMT"))) {
                        if(firstUpdate){
                            hintsValues.put("UPDATE", hintValue) ;
                            firstUpdate = false;
                        }else {
                            hintsValues.put("UPDATE", hintsValues.get("UPDATE") + "+" + hintValue) ;
                        }
                    }else if ("DELETE".equalsIgnoreCase(option.get("SQL_STMT"))) {
                        if (firstDelete){
                            hintsValues.put("DELETE", hintValue) ;
                            firstDelete =false;
                        }else {
                            hintsValues.put("DELETE", hintsValues.get("DELETE") + "+" + hintValue) ;
                        }
                    }else if ("TABLE_NAME".equalsIgnoreCase(option.get("SQL_STMT"))){
                        if (firstTableName){
                            hintsValues.put("TABLE_NAME", hintValue) ;
                            firstTableName = false;
                        }else {
                            hintsValues.put("TABLE_NAME", hintsValues.get("TABLE_NAME") + "+" + hintValue) ;
                        }
                    }
                }
            }
            //// hint options end ////
            %>

            if(dbschema_<%=cid%> == null || dbschema_<%=cid%>.trim().length() == 0) {
                tableName_<%=cid%> = (<%=table%>)<%=convertToUppercase ? ".toUpperCase()" : ""%>;
            } else {
                tableName_<%=cid%> = dbschema_<%=cid%> + "." + (<%=table%>)<%=convertToUppercase ? ".toUpperCase()" : ""%>;    
            }
            <%@ include file="../templates/_hintTableName.javajet" %>
            <%
            if(columnList != null && columnList.size()>0) {
            %>
                <%@ include file="../templates/_tableActionForOutput.javajet"%>
                <%
                Map<String, StringBuilder> actionSQLMap = getManager(dbmsId, cid).createProcessSQL(stmtStructure);
                StringBuilder insertColName = actionSQLMap.get(INSERT_COLUMN_NAME);
                StringBuilder insertValueStmt = actionSQLMap.get(INSERT_VALUE_STMT);
                StringBuilder updateSetStmt = actionSQLMap.get(UPDATE_SET_STMT);
                StringBuilder updateWhereStmt = actionSQLMap.get(UPDATE_WHERE_STMT);
                StringBuilder deleteWhereStmt = actionSQLMap.get(DELETE_WHERE_STMT);

                talendDynCol = getDynamicColumn();
                if(("INSERT").equals(dataAction)) {
                    List< ? extends IConnection> conns_dynamic = node.getIncomingConnections();
                    if(conns_dynamic!=null && conns_dynamic.size()>0){
                        IConnection conn = conns_dynamic.get(0);

                        if(!("".equals(insertColName.toString()))) {
                        %>
                            String insert_<%=cid%> = "INSERT INTO " + tableName_<%=cid%> + " (<%=insertColName.toString()%>, "+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>,"<%=dbmsId %>")<%if(convertToUppercase){%>.toUpperCase()<%}%>+") VALUES (<%=insertValueStmt.toString()%>, "+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=getDynamicColumn()%>)+")";
                        <%
                        } else {
                        %>
                            String insert_<%=cid%> = "INSERT INTO " + tableName_<%=cid%> + " ("+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")<%if(convertToUppercase){%>.toUpperCase()<%}%>+") VALUES ("+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=getDynamicColumn()%>)+")";
                        <%
                        }
                    }
                    %>
                    <%@ include file="../templates/_hintInsert.javajet" %>

                    <%
                    //to fixed: bug8422
                    if(!(cid.equals("talendLogs_DB") || cid.equals("talendStats_DB") || cid.equals("talendMeter_DB"))){%>
                        pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
                    <%}%>

                    <%
                    //to fixed: bug8422
                    if((cid.equals("talendLogs_DB") || cid.equals("talendStats_DB") || cid.equals("talendMeter_DB"))){ %>
                        pstmt_<%=cid %> = null;
                        // [%connection%][psmt][tableName]
                        String keyPsmt_<%=cid %> = conn_<%=cid%> + "[psmt]" + "[" + <%=table%> + "]";
                        if(GlobalResource.resourceMap.get(keyPsmt_<%=cid %>)== null){
                            pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
                            GlobalResource.resourceMap.put(keyPsmt_<%=cid %>, pstmt_<%=cid %>);
                        }else{
                            pstmt_<%=cid %> = (java.sql.PreparedStatement)GlobalResource.resourceMap.get(keyPsmt_<%=cid %>);
                        }
                    <%}%>

                <%
                } else if (("UPDATE").equals(dataAction)) {
                    List< ? extends IConnection> conns_dynamic = node.getIncomingConnections();
                    if(conns_dynamic!=null && conns_dynamic.size()>0){
                        IConnection conn = conns_dynamic.get(0);
                        if(!("".equals(updateSetStmt.toString()))) {
                        %>
                            String update_<%=cid%> = "UPDATE " + tableName_<%=cid%> + " SET <%=updateSetStmt.toString()%>, "+DynamicUtils.getUpdateSet(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")<%if(convertToUppercase){%>.toUpperCase()<%}%>+" WHERE <%=updateWhereStmt.toString()%>";
                        <%
                        } else {
                        %>
                            String update_<%=cid%> = "UPDATE " + tableName_<%=cid%> + " SET "+DynamicUtils.getUpdateSet(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")<%if(convertToUppercase){%>.toUpperCase()<%}%>+" WHERE <%=updateWhereStmt.toString()%>";
                        <%
                        }
                    }
                    %>
                    <%@ include file="../templates/_hintUpdate.javajet" %>
                    pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(update_<%=cid%>);
                <%
                } else if (("INSERT_OR_UPDATE").equals(dataAction)) {
                %>
                    pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement("SELECT COUNT(1) FROM " + tableName_<%=cid%> + " WHERE <%=updateWhereStmt.toString()%>");
                    <%
                    List< ? extends IConnection> conns_dynamic = node.getIncomingConnections();
                    if(conns_dynamic!=null && conns_dynamic.size()>0){
                        IConnection conn = conns_dynamic.get(0);

                        if(!("".equals(insertColName.toString()))) {
                        %>
                            String insert_<%=cid%> = "INSERT INTO " + tableName_<%=cid%> + " (<%=insertColName.toString()%>, "+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")<%if(convertToUppercase){%>.toUpperCase()<%}%>+") VALUES (<%=insertValueStmt.toString()%>, "+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=getDynamicColumn()%>)+")";
                        <%
                        } else {
                        %>
                            String insert_<%=cid%> = "INSERT INTO " + tableName_<%=cid%> + " ("+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")<%if(convertToUppercase){%>.toUpperCase()<%}%>+") VALUES ("+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=getDynamicColumn()%>)+")";
                        <%
                        }
                        if(!("".equals(updateSetStmt.toString()))) {
                        %>
                            String update_<%=cid%> = "UPDATE " + tableName_<%=cid%> + " SET <%=updateSetStmt.toString()%>, "+DynamicUtils.getUpdateSet(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")<%if(convertToUppercase){%>.toUpperCase()<%}%>+" WHERE <%=updateWhereStmt.toString()%>";
                        <%
                        } else {
                        %>
                            String update_<%=cid%> = "UPDATE " + tableName_<%=cid%> + " SET "+DynamicUtils.getUpdateSet(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")<%if(convertToUppercase){%>.toUpperCase()<%}%>+" WHERE <%=updateWhereStmt.toString()%>";
                        <%
                        }
                    }
                    %>
                    <%@ include file="../templates/_hintInsert.javajet" %>
                    pstmtInsert_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
                    <%@ include file="../templates/_hintUpdate.javajet" %>
                    pstmtUpdate_<%=cid %> = conn_<%=cid%>.prepareStatement(update_<%=cid%>);
                <%
                } else if (("UPDATE_OR_INSERT").equals(dataAction)) {
                    List< ? extends IConnection> conns_dynamic = node.getIncomingConnections();
                    if(conns_dynamic!=null && conns_dynamic.size()>0){
                        IConnection conn = conns_dynamic.get(0);

                        if(!("".equals(insertColName.toString()))) {
                        %>
                            String insert_<%=cid%> = "INSERT INTO " + tableName_<%=cid%> + " (<%=insertColName.toString()%>, "+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")<%if(convertToUppercase){%>.toUpperCase()<%}%>+") VALUES (<%=insertValueStmt.toString()%>, "+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=getDynamicColumn()%>)+")";
                        <%
                        } else {
                        %>
                            String insert_<%=cid%> = "INSERT INTO " + tableName_<%=cid%> + " ("+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")<%if(convertToUppercase){%>.toUpperCase()<%}%>+") VALUES ("+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=getDynamicColumn()%>)+")";
                        <%
                        }
                        if(!("".equals(updateSetStmt.toString()))) {
                        %>
                            String update_<%=cid%> = "UPDATE " + tableName_<%=cid%> + " SET <%=updateSetStmt.toString()%>, "+DynamicUtils.getUpdateSet(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")<%if(convertToUppercase){%>.toUpperCase()<%}%>+" WHERE <%=updateWhereStmt.toString()%>";
                        <%
                        } else {
                        %>
                            String update_<%=cid%> = "UPDATE " + tableName_<%=cid%> + " SET "+DynamicUtils.getUpdateSet(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")<%if(convertToUppercase){%>.toUpperCase()<%}%>+" WHERE <%=updateWhereStmt.toString()%>";
                        <%
                        }
                    }
                    %>
                    <%@ include file="../templates/_hintUpdate.javajet" %>
                    pstmtUpdate_<%=cid %> = conn_<%=cid%>.prepareStatement(update_<%=cid%>);
                    <%@ include file="../templates/_hintInsert.javajet" %>
                    pstmtInsert_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
                <%
                } else if (("DELETE").equals(dataAction)) {
                %>
                    String delete_<%=cid%> = "DELETE FROM " + tableName_<%=cid%> + " WHERE <%=deleteWhereStmt.toString()%>";
                    <%@ include file="../templates/_hintDelete.javajet" %>
                    pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(delete_<%=cid%>);
                <%
                }
                if(isEnableDebug) {
                %>
                   <%@ include file="../templates/DB/Output/splitSQLForAllDBInDynamicMain.javajet" %>
                <%
                }
            }
            %>
        }
    <%
    }

    ////////////////////////////////////////////////////////////
    List<Column> colStruct =  new ArrayList();
    for(Column colStmt : stmtStructure) {
        if(!colStmt.isReplaced() && !colStmt.isAddCol() && !colStmt.isDynamic()) {
            colStruct.add(colStmt);
        }
    }
    if(isEnableDebug) {
    %>
        query_<%=cid%> = new StringBuffer("");
    <%
    }

    boolean isParallelize ="true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__PARALLELIZE__"));

    if (isParallelize) { // bug0014422
        String tAsyncIn_cid = "";
        if(conns!=null && conns.size() > 0) {
            tAsyncIn_cid = conns.get(0).getSource().getUniqueName();
        }
        if(!useExistingConnection) {
            if(!("").equals(commitEvery)&&!("0").equals(commitEvery)) {
            %>
                commitEvery_<%=cid%> = buffersSize_<%=tAsyncIn_cid%>;
            <%
            }
        }

        if (useBatch) {
        %>
            batchSize_<%=cid%> = buffersSize_<%=tAsyncIn_cid%>;
        <%
        }
    }

    if(incomingConnName != null && columnList != null) {
    %>
        whetherReject_<%=cid%> = false;
        <%
        if(("INSERT").equals(dataAction)) {

            int counter = 1;
            for(Column column : colStruct) {
                if(column.isInsertable()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                    String dbType = column.getColumn().getType();
                    String columnName = column.getName();
                    if( null == dbType) {
                        dbType="";
                    }
                    if (typeToGenerate.equals("Geometry")) {
                        int targetSRID = -1;
                        try {
                            targetSRID = Integer.parseInt(ElementParameterParser.getValue(node,"__SRID__"));
                        }catch (NumberFormatException e) {
                        %>
                            // TODO unable to parse integer: <%=ElementParameterParser.getValue(node,"__SRID__")%>
                            // TODO error: <%=e.getMessage()%>
                            <%
                            e.printStackTrace();
                        }
                        %>
                        org.talend.sdi.geometry.Geometry tGeometry_<%=cid%> = (org.talend.sdi.geometry.Geometry)<%=incomingConnName%>.<%=column.getName() %>;
                        com.vividsolutions.jts.geom.Geometry geometry_<%=cid%> = tGeometry_<%=cid%>._getInternalGeometry();

                        com.vividsolutions.jts.geom.Envelope extends_<%=cid%> = geometryColumnToExtends.get("<%=columnName%>");
                        if (extends_<%=cid%> == null) {
                            geometryColumnToExtends.put("<%=columnName%>", geometry_<%=cid%>.getEnvelopeInternal());
                        }
                        else {
                            extends_<%=cid%>.expandToInclude(geometry_<%=cid%>.getEnvelopeInternal());
                        }

                        String wkt_<%=cid%> = geometry_<%=cid%>.toText();
                        oracle.spatial.util.WKT oracle_wkt_<%=cid%> = new oracle.spatial.util.WKT();
                        oracle.spatial.geometry.JGeometry jgeometry_<%=cid%> = oracle_wkt_<%=cid%>.toJGeometry(wkt_<%=cid%>.getBytes());

                        <%
                        if (targetSRID > 0) {
                        %>
                            jgeometry_<%=cid%>.setSRID(<%=targetSRID%>);
                        <%
                        }
                        %>
                        pstmt_<%=cid%>.setObject(<%=counter%>, oracle.spatial.geometry.JGeometry.store(jgeometry_<%=cid%>, conn_<%=cid%>));
                    <%
                    }else {
                    %>
                        <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, dbType, column, counter, incomingConnName, cid, NORMAL_TYPE)%>
                    <%
                    }
                    if(isEnableDebug) {
                    %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counter, "insertSQLSplits_")%>;
                    <%
                    }
                    counter++;
                }
            }
            if(isDynamic) {
                Column dynamicColumn = getColumn(talendDynCol);
                String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
                if(isEnableDebug) {
                %>
                    routines.system.DynamicUtils.debugDynamicSql(query_<%=cid%>,<%=incomingConnName%>.<%=dynamicColumn.getName()%>, <%=counter%>,insertSQLSplits_<%=cid%>);
                <%
                }
                if("Dynamic".equals(typeToGenerate)) {
                %>
                    DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmt_<%=cid%>, <%=counter-1%>, "<%=dbmsId%>");
                <%
                }
            }

            if(isEnableDebug) {
            %>
                globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
            <%
            }
            %>
            <%
            if (useBatch) {
            %>
                pstmt_<%=cid %>.addBatch();
                nb_line_<%=cid%>++;
                <%
                dbLog.data().addingToBatch(dbLog.var("nb_line"), dbLog.str(dataAction));
                %>
                batchSizeCounter_<%=cid%>++;
            <%
            }else {
            %>
                try {
                    nb_line_<%=cid%>++;
                    insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();
                    <%dbLog.data().inserting(dbLog.var("nb_line"));%>
                } catch(java.lang.Exception e_<%=cid%>) {
                    whetherReject_<%=cid%> = true;
                    <%
                    if (("true").equals(dieOnError)) {
                    %>
                        throw(e_<%=cid%>);
                    <%
                    } else {
                        if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                        %>
                            <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                            <%
                            for(IMetadataColumn column : columnList) {
                            %>
                                <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                            <%
                            }
                            %>
                            rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
                            <%=rejectConnName%>.errorCode = ((java.sql.SQLException)e_<%=cid%>).getSQLState();
                            <%=rejectConnName%>.errorMessage = e_<%=cid%>.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                        <%
                        } else {
                            dbLog.logPrintedException("e_"+cid+".getMessage()");
                            %>
                            System.err.print(e_<%=cid%>.getMessage());
                        <%
                        }
                    }
                    %>
                }
            <%
            }
        } else if(("UPDATE").equals(dataAction)) {
            int counterCol = 1;
            for(Column column : colStruct) {
                if(column.isUpdatable()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                    String dbType = column.getColumn().getType();
                    if( null == dbType) {
                        dbType="";
                    }
                    %>
                    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, dbType, column, counterCol, incomingConnName, cid, NORMAL_TYPE)%>
                    <%
                    if(isEnableDebug) {
                    %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
                    <%
                    }
                    counterCol++;
                }
            }
            if(isDynamic) {
                Column dynamicColumn = getColumn(talendDynCol);
                String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
                if("Dynamic".equals(typeToGenerate)) {
                    if(isEnableDebug) {
                    %>
                        routines.system.DynamicUtils.debugDynamicSql(query_<%=cid%>,<%=incomingConnName%>.<%=dynamicColumn.getName()%>, <%=counterCol%>,updateSQLSplits_<%=cid%>);
                    <%
                    }
                    %>
                    int count_<%=cid%>=DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmt_<%=cid%>, <%=counterCol-1%>, "<%=dbmsId%>");
                <%
                }
            }

            for(Column column : colStruct) {
                if(column.isUpdateKey()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                    String dbType = column.getColumn().getType();
                    if( null == dbType) {
                        dbType="";
                    }
                    //#############for feature:2880 and 6980
                    if(whereSupportNull && column.getColumn().isNullable()) {
                        if(isDynamic){
                        %>
                           <%=getManager(dbmsId, cid, node).generateSetBooleanForNullableKeyStmt(talendDynCol.getLabel(),column, counterCol, incomingConnName, cid, NORMAL_TYPE)%>
                        <%
                        }else{
                        %>
                            <%=getManager(dbmsId, cid, node).generateSetBooleanForNullableKeyStmt(column, counterCol, incomingConnName, cid, NORMAL_TYPE)%>
                        <%
                        }
                        if(isEnableDebug) {
                            if(isDynamic){
                            %>
                                query_<%=cid%> = <%=getManager(dbmsId, cid, node).retrieveSQL(talendDynCol.getLabel(),typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_", "(("+incomingConnName+"."+column.getName()+"==null)?1:0)")%>;
                            <%
                            }else{
                            %>
                                query_<%=cid%> = <%=getManager(dbmsId, cid, node).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_", "(("+incomingConnName+"."+column.getName()+"==null)?1:0)")%>;
                            <%
                            }
                        }
                        counterCol++;
                    }
                    //#############
                    %>

                    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, dbType, column, counterCol, incomingConnName, cid, NORMAL_TYPE, " + count_")%>
                    <%
                    if(isEnableDebug) {
                        if(isDynamic){
                        %>
                            query_<%=cid%> = <%=getManager(dbmsId, cid, node).retrieveSQL(talendDynCol.getLabel(),typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
                        <%
                        }else{
                        %>
                           query_<%=cid%> = <%=getManager(dbmsId, cid, node).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
                        <%
                        }
                    }
                    counterCol++;
                }
            }
            if(isEnableDebug) {
            %>
                globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
            <%
            }
            %>
            <%
            if(useBatch) {
            %>
                pstmt_<%=cid %>.addBatch();
                nb_line_<%=cid%>++;
                <%
                dbLog.data().addingToBatch(dbLog.var("nb_line"), dbLog.str(dataAction));
                %>
                batchSizeCounter_<%=cid%>++;
            <%
            }else {
            %>
                try {
                    nb_line_<%=cid%>++;
                    updatedCount_<%=cid%> = updatedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();
                    <%dbLog.data().updating(dbLog.var("nb_line"));%>
                } catch(java.lang.Exception e_<%=cid%>) {
                    whetherReject_<%=cid%> = true;
                    <%
                    if (("true").equals(dieOnError)) {
                    %>
                        throw(e_<%=cid%>);
                    <%
                    } else {
                        if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                        %>
                            <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                            <%
                            for(IMetadataColumn column : columnList) {
                            %>
                                <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                            <%
                            }
                            %>
                            rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
                            <%=rejectConnName%>.errorCode = ((java.sql.SQLException)e_<%=cid%>).getSQLState();
                            <%=rejectConnName%>.errorMessage = e_<%=cid%>.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                        <%
                        } else {
                            dbLog.logPrintedException("e_"+cid+".getMessage()");
                            %>
                            System.err.print(e_<%=cid%>.getMessage());
                        <%
                        }
                    }
                    %>
                }
            <%
            }
        } else if (("INSERT_OR_UPDATE").equals(dataAction)) {
            int columnIndex = 1;
            for(Column column : colStruct) {
                if(column.isUpdateKey()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                    String dbType = column.getColumn().getType();
                    if( null == dbType) {
                        dbType="";
                    }
                    //#############for feature:2880 and 6980
                    if(whereSupportNull && column.getColumn().isNullable()) {
                    %>
                        <%=getManager(dbmsId, cid, node).generateSetBooleanForNullableKeyStmt(column, columnIndex, incomingConnName, cid, NORMAL_TYPE)%>
                        <%
                        columnIndex++;
                    }
                    //#############
                    %>
                    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, dbType, column, columnIndex, incomingConnName, cid, NORMAL_TYPE)%>
                    <%
                    columnIndex++;
                }
            }
            %>

            java.sql.ResultSet rs_<%=cid%> = pstmt_<%=cid %>.executeQuery();
            int checkCount_<%=cid%> = -1;
            while(rs_<%=cid%>.next()) {
                checkCount_<%=cid%> = rs_<%=cid%>.getInt(1);
            }
            if(checkCount_<%=cid%> > 0) {
                <%
                int counterCol = 1;
                for(Column column : colStruct) {
                    if(column.isUpdatable()) {
                        String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                        String dbType = column.getColumn().getType();
                        if( null == dbType) {
                            dbType="";
                        }
                        %>
                        <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, dbType, column, counterCol, incomingConnName, cid, UPDATE_TYPE)%>
                        <%
                        if(isEnableDebug) {
                        %>
                            query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
                        <%
                        }
                        counterCol++;
                    }
                }
                if(isDynamic) {
                    Column dynamicColumn = getColumn(getDynamicColumn());
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
                    if("Dynamic".equals(typeToGenerate)) {
                        if(isEnableDebug) {
                        %>
                            routines.system.DynamicUtils.debugDynamicSql(query_<%=cid%>,<%=incomingConnName%>.<%=dynamicColumn.getName()%>, <%=counterCol%>,updateSQLSplits_<%=cid%>);
                        <%
                        }
                        %>
                        int count_<%=cid%>=DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmtUpdate_<%=cid%>, <%=counterCol-1%>, "<%=dbmsId%>");
                    <%
                    }
                }
                for(Column column : colStruct) {
                    if(column.isUpdateKey()) {
                        String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                        String dbType = column.getColumn().getType();
                        if( null == dbType) {
                            dbType="";
                        }
                        //#############for feature:2880
                        if(whereSupportNull && column.getColumn().isNullable()) {
                            if(isDynamic){
                            %>
                                <%=getManager(dbmsId, cid, node).generateSetBooleanForNullableKeyStmt(talendDynCol.getLabel(),column, counterCol, incomingConnName, cid, UPDATE_TYPE)%>
                            <%
                            }else{
                            %>
                                <%=getManager(dbmsId, cid, node).generateSetBooleanForNullableKeyStmt(column, counterCol, incomingConnName, cid, UPDATE_TYPE)%>
                            <%
                            }
                            if(isEnableDebug) {
                                if(isDynamic){
                                %>
                                    query_<%=cid%> = <%=getManager(dbmsId, cid, node).retrieveSQL(talendDynCol.getLabel(),typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_", "(("+incomingConnName+"."+column.getName()+"==null)?1:0)")%>;
                                <%
                                }else{
                                %>
                                    query_<%=cid%> = <%=getManager(dbmsId, cid, node).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_", "(("+incomingConnName+"."+column.getName()+"==null)?1:0)")%>;
                                <%
                                }
                            }
                            counterCol++;
                        }
                        //#############
                        %>
                        <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, dbType, column, counterCol, incomingConnName, cid, UPDATE_TYPE, " + count_")%>
                        <%
                        if(isEnableDebug) {
                            if(isDynamic){
                            %>
                                query_<%=cid%> = <%=getManager(dbmsId, cid, node).retrieveSQL(talendDynCol.getLabel(),typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
                            <%
                            }else{
                            %>
                                query_<%=cid%> = <%=getManager(dbmsId, cid, node).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
                            <%
                            }
                        }
                        counterCol++;
                    }
                }
                if(isEnableDebug) {
                %>
                    globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
                <%
                }
                %>
                try {
                    updatedCount_<%=cid%> = updatedCount_<%=cid%> + pstmtUpdate_<%=cid %>.executeUpdate();
                    nb_line_<%=cid%>++;
                    <%dbLog.data().updating(dbLog.var("nb_line"));%>
                } catch(java.lang.Exception e_<%=cid%>) {
                    whetherReject_<%=cid%> = true;
                    <%
                    if (("true").equals(dieOnError)) {
                    %>
                        throw(e_<%=cid%>);
                    <%
                    } else {
                    %>
                        nb_line_<%=cid%>++;
                        <%
                        if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                        %>
                            <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                            <%
                            for(IMetadataColumn column : columnList) {
                            %>
                                <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                            <%
                            }
                            %>
                            rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
                            <%=rejectConnName%>.errorCode = ((java.sql.SQLException)e_<%=cid%>).getSQLState();
                            <%=rejectConnName%>.errorMessage = e_<%=cid%>.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                        <%
                        } else {
                            dbLog.logPrintedException("e_"+cid+".getMessage()");
                            %>
                            System.err.print(e_<%=cid%>.getMessage());
                        <%
                        }
                    }
                    %>
                }
            } else {
                <%
                int counterInsert = 1;
                for(Column columnInsert : colStruct){
                    if(columnInsert.isInsertable()) {
                        String typeToGenerate = JavaTypesManager.getTypeToGenerate(columnInsert.getColumn().getTalendType(), columnInsert.getColumn().isNullable());
                        String dbType = columnInsert.getColumn().getType();
                        if( null == dbType) {
                            dbType="";
                        }
                        %>
                        <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, dbType, columnInsert, counterInsert, incomingConnName, cid, INSERT_TYPE)%>
                        <%
                        if(isEnableDebug) {
                        %>
                            query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, columnInsert, incomingConnName, cid, "query_" ,  counterInsert, "insertSQLSplits_")%>;
                        <%
                        }
                        counterInsert++;
                    }
                }
                if(isDynamic) {
                    Column dynamicColumn = getColumn(getDynamicColumn());
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
                    if("Dynamic".equals(typeToGenerate)) {
                        if(isEnableDebug) {
                        %>
                            routines.system.DynamicUtils.debugDynamicSql(query_<%=cid%>,<%=incomingConnName%>.<%=dynamicColumn.getName()%>, <%=counterInsert%>,insertSQLSplits_<%=cid%>);
                        <%
                        }
                        %>
                        DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmtInsert_<%=cid%>, <%=counterInsert-1%>, "<%=dbmsId%>");
                    <%
                    }
                }
                if(isEnableDebug) {
                %>
                    globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
                <%
                }
                %>
                try {
                    insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmtInsert_<%=cid %>.executeUpdate();
                    nb_line_<%=cid%>++;
                    <%dbLog.data().inserting(dbLog.var("nb_line"));%>
                } catch(java.lang.Exception e_<%=cid%>) {
                    whetherReject_<%=cid%> = true;
                    <%
                    if (("true").equals(dieOnError)) {
                    %>
                        throw(e_<%=cid%>);
                    <%
                    } else {
                    %>
                        nb_line_<%=cid%>++;
                        <%
                        if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                        %>
                            <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                            <%
                            for(IMetadataColumn column : columnList) {
                            %>
                                <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                            <%
                            }
                            %>
                            rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
                            <%=rejectConnName%>.errorCode = ((java.sql.SQLException)e_<%=cid%>).getSQLState();
                            <%=rejectConnName%>.errorMessage = e_<%=cid%>.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                        <%
                        } else {
                            dbLog.logPrintedException("e_"+cid+".getMessage()");
                            %>
                            System.err.print(e_<%=cid%>.getMessage());
                        <%
                        }
                    }
                    %>
                }
            }
        <%
        } else if (("UPDATE_OR_INSERT").equals(dataAction)) {
        %>
            int updateFlag_<%=cid%> = 0;
            <%
            int counterColUpdate = 1;
            for(Column columnUpdate : colStruct) {
                if(columnUpdate.isUpdatable()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(columnUpdate.getColumn().getTalendType(), columnUpdate.getColumn().isNullable());
                    String dbType = columnUpdate.getColumn().getType();
                    if( null == dbType) {
                        dbType="";
                    }
                    %>
                    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, dbType, columnUpdate, counterColUpdate, incomingConnName, cid, UPDATE_TYPE)%>
                    <%
                    if(isEnableDebug) {
                    %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, columnUpdate, incomingConnName, cid, "query_" , counterColUpdate, "updateSQLSplits_")%>;
                    <%
                    }
                    counterColUpdate++;
                }
            }
            if(isDynamic) {
                Column dynamicColumn = getColumn(getDynamicColumn());
                String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
                if("Dynamic".equals(typeToGenerate)) {
                    if(isEnableDebug) {
                    %>
                        routines.system.DynamicUtils.debugDynamicSql(query_<%=cid%>,<%=incomingConnName%>.<%=dynamicColumn.getName()%>, <%=counterColUpdate%>,updateSQLSplits_<%=cid%>);
                    <%
                    }
                    %>

                    int count_<%=cid%>=DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmtUpdate_<%=cid%>, <%=counterColUpdate-1%>, "<%=dbmsId%>");
                <%
                }
            }

            for(Column columnUpdate : colStruct) {
                if(columnUpdate.isUpdateKey()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(columnUpdate.getColumn().getTalendType(), columnUpdate.getColumn().isNullable());
                    String dbType = columnUpdate.getColumn().getType();
                    if( null == dbType) {
                        dbType="";
                    }
                    //#############for feature:2880 and 6980
                    if(whereSupportNull && columnUpdate.getColumn().isNullable()) {
                        if(isDynamic){
                        %>
                            <%=getManager(dbmsId, cid, node).generateSetBooleanForNullableKeyStmt(talendDynCol.getLabel(),columnUpdate, counterColUpdate, incomingConnName, cid, UPDATE_TYPE)%>
                        <%
                        }else{
                        %>
                            <%=getManager(dbmsId, cid, node).generateSetBooleanForNullableKeyStmt(columnUpdate, counterColUpdate, incomingConnName, cid, UPDATE_TYPE)%>
                        <%
                        }
                        if(isEnableDebug) {
                            if(isDynamic){
                            %>
                            query_<%=cid%> = <%=getManager(dbmsId, cid, node).retrieveSQL(talendDynCol.getLabel(),typeToGenerate, columnUpdate, incomingConnName, cid, "query_" , counterColUpdate, "updateSQLSplits_", "(("+incomingConnName+"."+columnUpdate.getName()+"==null)?1:0)")%>;
                            <%
                            }else{
                            %>
                            query_<%=cid%> = <%=getManager(dbmsId, cid, node).retrieveSQL(typeToGenerate, columnUpdate, incomingConnName, cid, "query_" , counterColUpdate, "updateSQLSplits_", "(("+incomingConnName+"."+columnUpdate.getName()+"==null)?1:0)")%>;
                            <%
                            }
                        }
                            counterColUpdate++;
                    }
                    //#############
                    %>

                    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, dbType, columnUpdate, counterColUpdate, incomingConnName, cid, UPDATE_TYPE, " + count_")%>
                    <%
                    if(isEnableDebug) {
                        if(isDynamic){
                        %>
                            query_<%=cid%> = <%=getManager(dbmsId, cid, node).retrieveSQL(talendDynCol.getLabel(),typeToGenerate, columnUpdate, incomingConnName, cid, "query_" , counterColUpdate, "updateSQLSplits_")%>;
                        <%
                        }else{
                        %>
                            query_<%=cid%> = <%=getManager(dbmsId, cid, node).retrieveSQL(typeToGenerate, columnUpdate, incomingConnName, cid, "query_" , counterColUpdate, "updateSQLSplits_")%>;
                        <%
                        }
                    }
                    counterColUpdate++;
                }
            }
            if(isEnableDebug) {
            %>
                globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
            <%
            }
            %>

            try {
                updateFlag_<%=cid%> = pstmtUpdate_<%=cid %>.executeUpdate();
                updatedCount_<%=cid%> = updatedCount_<%=cid%>+updateFlag_<%=cid%>;
                if(updateFlag_<%=cid%> == 0) {
                    <%
                    if(isEnableDebug) {
                    %>
                        query_<%=cid%> = new StringBuffer("");
                    <%
                    }
                    int counter = 1;
                    for(Column column : colStruct) {
                        if(column.isInsertable()) {
                            String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                            String dbType = column.getColumn().getType();
                            if( null == dbType) {
                                dbType="";
                            }
                            %>
                            <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, dbType, column, counter, incomingConnName, cid, INSERT_TYPE)%>
                            <%
                            if(isEnableDebug) {
                            %>
                                query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counter, "insertSQLSplits_")%>;
                            <%
                            }
                            counter++;
                        }
                    }
                    if(isDynamic) {
                        Column dynamicColumn = getColumn(talendDynCol);
                        String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
                        if("Dynamic".equals(typeToGenerate)) {
                            if(isEnableDebug) {
                            %>
                                routines.system.DynamicUtils.debugDynamicSql(query_<%=cid%>,<%=incomingConnName%>.<%=dynamicColumn.getName()%>, <%=counter%>,insertSQLSplits_<%=cid%>);
                            <%
                            }
                            %>
                            DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmtInsert_<%=cid%>, <%=counter-1%>, "<%=dbmsId%>");
                        <%
                        }
                    }
                    if(isEnableDebug) {
                    %>
                        globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
                    <%
                    }
                    %>
                    insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmtInsert_<%=cid %>.executeUpdate();
                    nb_line_<%=cid%>++;
                    <%dbLog.data().inserting(dbLog.var("nb_line"));%>
                }else{
                    nb_line_<%=cid%>++;
                    <%dbLog.data().updating(dbLog.var("nb_line"));%>
                }
            } catch(java.lang.Exception e_<%=cid%>) {
                whetherReject_<%=cid%> = true;
                <%
                if (("true").equals(dieOnError)) {
                %>
                    throw(e_<%=cid%>);
                <%
                } else {
                %>
                    nb_line_<%=cid%>++;
                    <%
                    if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                    %>
                        <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                        <%
                        for(IMetadataColumn column : columnList) {
                        %>
                            <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                        <%
                        }
                        %>
                        rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
                        <%=rejectConnName%>.errorCode = ((java.sql.SQLException)e_<%=cid%>).getSQLState();
                        <%=rejectConnName%>.errorMessage = e_<%=cid%>.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                    <%
                    } else {
                        dbLog.logPrintedException("e_"+cid+".getMessage()");
                        %>
                        System.err.print(e_<%=cid%>.getMessage());
                    <%
                    }
                }
                %>
            }
        <%
        } else if (("DELETE").equals(dataAction)) {
            int keyCounter = 1;
            for(Column column : colStruct) {
                if(column.isDeleteKey()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                    String dbType = column.getColumn().getType();
                    if( null == dbType) {
                        dbType="";
                    }
                    //#############for feature:2880 and 6980
                    if(whereSupportNull && column.getColumn().isNullable()) { %>
                        <%=getManager(dbmsId, cid, node).generateSetBooleanForNullableKeyStmt(column, keyCounter, incomingConnName, cid, NORMAL_TYPE)%>
                        <%
                        if(isEnableDebug) {
                        %>
                            query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , keyCounter, "deleteSQLSplits_", "(("+incomingConnName+"."+column.getName()+"==null)?1:0)")%>;
                        <%
                        }
                        keyCounter++;
                    }
                    //#############
                    %>
                    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, dbType, column, keyCounter, incomingConnName, cid, NORMAL_TYPE)%>
                    <%
                    if(isEnableDebug) {
                    %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , keyCounter, "deleteSQLSplits_")%>;
                    <%
                    }
                    keyCounter++;
                }
            }
            if(isEnableDebug) {
            %>
                globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
            <%
            }
            if (useBatch) {
            %>
                pstmt_<%=cid %>.addBatch();
                nb_line_<%=cid%>++;
                <%
                dbLog.data().addingToBatch(dbLog.var("nb_line"), dbLog.str(dataAction));
                %>
                batchSizeCounter_<%=cid%>++;
            <%
            }else {
            %>
                try {
                    deletedCount_<%=cid%> = deletedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();
                    nb_line_<%=cid%>++;
                    <%dbLog.data().deleting(dbLog.var("nb_line"));%>
                } catch(java.lang.Exception e_<%=cid%>) {
                    whetherReject_<%=cid%> = true;
                    <%
                    if (("true").equals(dieOnError)) {
                    %>
                        throw(e_<%=cid%>);
                    <%
                    } else {
                    %>
                        nb_line_<%=cid%>++;
                        <%
                        if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                        %>
                            <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                            <%
                            for(IMetadataColumn column : columnList) {
                            %>
                                <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                            <%
                            }
                            %>
                            rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
                            <%=rejectConnName%>.errorCode = ((java.sql.SQLException)e_<%=cid%>).getSQLState();
                            <%=rejectConnName%>.errorMessage = e_<%=cid%>.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                        <%
                        } else {
                            dbLog.logPrintedException("e_"+cid+".getMessage()");
                            %>
                            System.err.print(e_<%=cid%>.getMessage());
                        <%
                        }
                    }
                    %>
                }
            <%
            }
        }



        if(outgoingConns != null && outgoingConns.size() > 0) {
        %>
            if(!whetherReject_<%=cid%>) {
                <%
                for(IConnection outgoingConn : outgoingConns) {
                    if(rejectConnName == null || (rejectConnName != null && !outgoingConn.getName().equals(rejectConnName))) {
                        if(outgoingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
                        %>
                            <%=outgoingConn.getName()%> = new <%=outgoingConn.getName()%>Struct();
                            <%
                            for(IMetadataColumn column : columnList) {
                            %>
                                <%=outgoingConn.getName()%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                            <%
                            }
                        }
                    }
                }
                %>
            }
        <%
        }
        //////////batch execute by batch size///////
        if (useBatch) {
        %>
            if (batchSize_<%=cid%> > 0 &&  batchSize_<%=cid%> <= batchSizeCounter_<%=cid%>) {
                try {
                    <%dbLog.batch().executeTry(dbLog.str(dataAction));%>
                    pstmt_<%=cid %>.executeBatch();
                    <%dbLog.batch().executeDone(dbLog.str(dataAction));%>
                }catch (java.sql.BatchUpdateException e_<%=cid%>){
                    <%
                    if(("true").equals(dieOnError)) {
                    %>
                        throw(e_<%=cid%>);
                    <%
                    }else {
                        dbLog.logPrintedException("e_"+cid+".getMessage()");
                        %>
                        System.err.println(e_<%=cid%>.getMessage());
                    <%
                    }
                    %>
                }
                tmp_batchUpdateCount_<%=cid%> = pstmt_<%=cid %>.getUpdateCount();
                <%
                if (("INSERT").equals(dataAction)) {
                %>
                    insertedCount_<%=cid%>
                <%
                }else if (("UPDATE").equals(dataAction)) {
                %>
                    updatedCount_<%=cid%>
                <%
                }else if (("DELETE").equals(dataAction)) {
                %>
                    deletedCount_<%=cid%>
                <%
                }
                %>
                += (tmp_batchUpdateCount_<%=cid%>!=-1?tmp_batchUpdateCount_<%=cid%>:0);
                batchSizeCounter_<%=cid%> = 0;
            }
        <%
        }


        ////////////commit every////////////
        if(!useExistingConnection) {
            if(!("").equals(commitEvery) && !("0").equals(commitEvery)) {
            %>
                commitCounter_<%=cid%>++;
                if(commitEvery_<%=cid%> <= commitCounter_<%=cid%>) {

                    <%
                    if (useBatch) {
                    %>
                        try {
                            <%dbLog.batch().executeTry(dbLog.str(dataAction));%>
                            pstmt_<%=cid %>.executeBatch();
                            <%dbLog.batch().executeDone(dbLog.str(dataAction));%>
                        }catch (java.sql.BatchUpdateException e_<%=cid%>){
                            <%
                            if(("true").equals(dieOnError)) {
                            %>
                                throw(e_<%=cid%>);
                            <%
                            }else {
                                dbLog.logPrintedException("e_"+cid+".getMessage()");
                                %>
                                System.err.println(e_<%=cid%>.getMessage());
                            <%
                            }
                            %>
                        }
                        tmp_batchUpdateCount_<%=cid%> = pstmt_<%=cid %>.getUpdateCount();
                        <%
                        if (("INSERT").equals(dataAction)) {
                        %>
                            insertedCount_<%=cid%>
                        <%
                        }else if (("UPDATE").equals(dataAction)) {
                        %>
                            updatedCount_<%=cid%>
                        <%
                        }else if (("DELETE").equals(dataAction)) {
                        %>
                            deletedCount_<%=cid%>
                        <%
                        }
                        %>
                        += (tmp_batchUpdateCount_<%=cid%>!=-1?tmp_batchUpdateCount_<%=cid%>:0);
                    <%
                    }
                    %>
                    <%dbLog.commit().commitTry(null, dbLog.var("commitCounter"));%>
                    conn_<%=cid%>.commit();
                    <%dbLog.commit().commitDone(null);%>
                    commitCounter_<%=cid%>=0;
                }
            <%
            }
        }
    }
    %>
